"""
** EPITECH PROJECT, 2024
** yorn
** File description:
** library and template manager
"""

from .imports import *

from .api import *
from .utils import *
from .configs import *
from .configs_interactions import *

class CommandAddStatus(Enum):
    VERSION_ERROR = 0
    ALREADY_SET = 1
    LIB_NOT_FOUND = 1
    ALL_CLEAR = 2

    def displayError(status):
        if (status == CommandAddStatus.VERSION_ERROR):
            print("\n⚠ The library you want to add is already installed but in another version. ⚠\n⚠ Try to use the command \"update\" to update the library. ⚠\n")
        elif (status == CommandAddStatus.ALREADY_SET):
            print("\n⚠ The library you want to add is already installed in the same version. ⚠\n")
        elif (status == CommandAddStatus.LIB_NOT_FOUND):
            print("\n⚠ The library you want to add isn't an official library. ⚠\n")

def checkForYornConfig():
    if os.path.exists(CONFIG_FILEPATH): return
    save_config({
        "_comment": "THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY."
    }, CONFIG_FILEPATH)


def addLibraryInConfig(configs: dict, librayName, version) -> bool:
    if not "libs" in configs:
        configs["libs"] = {}
    if librayName in configs["libs"]:
        if configs["libs"][librayName].get("version") == version:
            return CommandAddStatus.ALREADY_SET
        return CommandAddStatus.VERSION_ERROR
    if repoExist(AUTHOR_NAME, librayName)

    configs["libs"][librayName] = {
        "version": version,
        "hash": None,
        "dependencies": [],
        "source": ""
    }
    return CommandAddStatus.ALL_CLEAR

def commandAdd(libraryName, version):
    checkForYornConfig()
    config = load_config()
    status = addLibraryInConfig(config, libraryName, version)
    if (status == CommandAddStatus.ALL_CLEAR):
        save_config(config)
    else:
        CommandAddStatus.displayError(status)
